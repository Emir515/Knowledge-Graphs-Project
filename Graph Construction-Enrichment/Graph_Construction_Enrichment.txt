Knowledge Graph: Travel Data (Neo4j Aura)

This workflow builds a **knowledge graph** of European travel patterns using **Eurostat tourism datasets**.  
We focus on **Trips**, their **Destinations**, and traveler attributes (**Age**, **Sex**).  

--------------------------------------------------------------------------------
Datasets
--------------------------------------------------------------------------------
- extot_ready.csv → Trips + Destinations  
- tnage_ready.csv → Age groups  
- ttsex_ready.csv → Sex groups  

The datasets firstly preprocessed to make it ready for the Neo4J to create the knowledge graph,
and they were uploaded to a Github repository to make them easy to access by Neo4j Aura, the preprocess 
steps can be found in the Preprocessing.ipynb file, in this file first we checked the datasets and the 
columns that we are going to use the graph, the I created the preprocess function in this file to make 
the process more stable for all the three datasets. And then the datasets were saved in local, commited to the repository
that you can find below:

All datasets are available in the GitHub repository under:
https://github.com/Emir515/Knowledge-Graphs-Project/tree/main/Datasets/Processed

--------------------------------------------------------------------------------
Setup in Neo4j Aura
--------------------------------------------------------------------------------

### 1. Clear database # this step is optional but it was a must for me because, 
first i was trying to create it manually.
MATCH (n) DETACH DELETE n;

### 2. Create Indexes # for this step we created the indexes
CREATE INDEX trip_id IF NOT EXISTS FOR (t:Trip) ON (t.trip_id);
CREATE INDEX destination_geo IF NOT EXISTS FOR (d:Destination) ON (d.geo);
CREATE INDEX age_value IF NOT EXISTS FOR (a:AgeGroup) ON (a.age);
CREATE INDEX sex_value IF NOT EXISTS FOR (s:Sex) ON (s.sex);

--------------------------------------------------------------------------------
  Data Import Queries
--------------------------------------------------------------------------------
# To import the queries I used the github repository but it needs to be in the raw format, then 
for each dataset some specific steps were taken, and relations were added.

### Import Trips + Destinations
LOAD CSV WITH HEADERS FROM "https://raw.githubusercontent.com/Emir515/Knowledge-Graphs-Project/main/Datasets/Processed/extot_ready.csv" AS row
WITH row
WHERE row.trip_id IS NOT NULL
MERGE (t:Trip {trip_id: row.trip_id})
SET t.year = CASE WHEN row.year <> "" THEN toInteger(row.year) ELSE null END,
    t.purpose = row.purpose,
    t.duration = row.duration,
    t.value = CASE WHEN row.value <> "" THEN toFloat(row.value) ELSE null END,
    t.geo = row.geo
MERGE (d:Destination {geo: row.geo})
MERGE (t)-[:TO_DESTINATION]->(d);

### Import Age Groups
LOAD CSV WITH HEADERS FROM "https://raw.githubusercontent.com/Emir515/Knowledge-Graphs-Project/main/Datasets/Processed/tnage_ready.csv" AS row
MATCH (t:Trip)
WHERE t.geo = row.geo
  AND t.year = toInteger(row.year)
  AND t.purpose = row.purpose
  AND t.duration = row.duration
MERGE (a:AgeGroup {age: row.age})
MERGE (t)-[:HAS_AGE]->(a);

### Import Sex Groups
LOAD CSV WITH HEADERS FROM "https://raw.githubusercontent.com/Emir515/Knowledge-Graphs-Project/main/Datasets/Processed/ttsex_ready.csv" AS row
MATCH (t:Trip)
WHERE t.geo = row.geo
  AND t.year = toInteger(row.year)
  AND t.purpose = row.purpose
  AND t.duration = row.duration
MERGE (s:Sex {sex: row.sex})
MERGE (t)-[:HAS_SEX]->(s);

--------------------------------------------------------------------------------
  Validation Queries
---------------------------------------------------------------------------
## In these steps, i tried to check whether the datasets were added.
### Count Nodes
MATCH (t:Trip) RETURN count(t) AS trips;
MATCH (d:Destination) RETURN count(d) AS destinations;
MATCH (a:AgeGroup) RETURN count(a) AS ages;
MATCH (s:Sex) RETURN count(s) AS sexes;

### Sample Trips
MATCH (t:Trip)-[:TO_DESTINATION]->(d:Destination)
RETURN t.year, t.purpose, t.duration, d.geo, t.value
LIMIT 10;

### Top Destinations for Young Travelers
MATCH (a:AgeGroup {age:"Y15-24"})<-[:HAS_AGE]-(t:Trip)-[:TO_DESTINATION]->(d:Destination)
RETURN d.geo, count(t) AS trips
ORDER BY trips DESC
LIMIT 10;

------------------------------------------------------------------------------
  Graph Schema
-------------------------------------------------------------------------------
## here we see the graph struture 

(AgeGroup) <-[:HAS_AGE]- (Trip) -[:TO_DESTINATION]-> (Destination)
(Sex)      <-[:HAS_SEX]-/

--------------------------------------------------------------------------------

// Export a combined nodes CSV for GraphSAGE
MATCH (t:Trip)
OPTIONAL MATCH (t)-[:HAS_AGE]->(a:AgeGroup)
OPTIONAL MATCH (t)-[:HAS_SEX]->(s:Sex)
OPTIONAL MATCH (t)-[:TO_DESTINATION]->(d:Destination)
RETURN 
  id(t) AS node_id,
  t.trip_id AS trip_id,
  'Trip' AS node_type,
  t.purpose AS purpose,
  t.duration AS duration,
  t.year AS year,
  t.value AS value,
  d.geo AS geo,
  a.age AS age,
  s.sex AS sex;
